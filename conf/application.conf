# Copyright 2023 HM Revenue & Customs
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

include "backend.conf"

# This is the main configuration file for the application.
# ~~~~~

appName=leak-detection

# Json error handler
play.http.errorHandler = "uk.gov.hmrc.play.bootstrap.backend.http.JsonErrorHandler"

# Http client
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.HttpClientV2Module"

# Play Modules
# ~~~~
# Additional play modules can be added here

play.modules.enabled += "uk.gov.hmrc.mongo.play.PlayMongoModule"

# Local module
play.modules.enabled += "uk.gov.hmrc.leakdetection.Module"

# Session Timeout
# ~~~~
# The default session timeout for the app is 15 minutes (900seconds).
# Updating this is the responsibility of the app - it must issue a new cookie with each request or the session will
# timeout 15 minutes after login (regardless of user activity).
# session.maxAge=900

# Session configuration
# ~~~~~
application.session.httpOnly = false
application.session.secure = false

# The application languages
# ~~~~~
play.i18n.langs = [ "en" ]

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# !!!WARNING!!! DO NOT CHANGE THIS ROUTER
play.http.router = prod.Routes


# Controller
# ~~~~~
# By default all controllers will have authorisation, logging and
# auditing (transaction monitoring) enabled.
# The below controllers are the default exceptions to this rule.

controllers {
  # 300 is the default, you may need to change this according to your needs
  confidenceLevel = 300

  com.kenshoo.play.metrics.MetricsController = {
    needsAuth = false
    needsLogging = false
    needsAuditing = false
  }
}

# Microservice specific config

mongodb {
  uri = "mongodb://localhost:27017/leak-detection"
}

microservice {
  services {
    teams-and-repositories {
      host = localhost
      port = 9015
    }

    slack-notifications {
      host = localhost
      port = 8866
    }
  }
}

internal-auth.token = PLACEHOLDER

alerts {
  slack {
    leakDetectionUri    = "http://localhost:8855"
    enabled             = false
    repositoryChannel {
        enabled = false
   }
    alertChannel {
        enabled  = true
    }
    adminChannel        = "#admin-channel"
    defaultAlertChannel = "#a-channel"
    username            = "leak-detection"
    iconEmoji           = ":closed_lock_with_key:"
    messageText         = "*Action Required!*\n\n\nSomething sensitive seems to have been pushed to a {repoVisibility} repository.\n`{repo}` on github, `{branch}` branch."
    warningText         = "*Action Required!*\n\n\n{repoVisibility} Repository `{repo}` has a problem - {warningMessage}."
    seeReportText       = ".\n\n\nPlease have a look at <{reportLink}|this report> as soon as possible."
    warningsToAlert     = ["MissingRepositoryYamlFile", "InvalidEntry", "MissingEntry", "ParseFailure", "FileLevelExemptions"]
  }
}

warningMessages {
  MissingRepositoryYamlFile = The repository.yaml file is missing
  InvalidEntry = The repoVisibility provided within repository.yaml is incorrect
  MissingEntry = The repository.yaml file is missing a repoVisibility
  ParseFailure = The repository.yaml file is not valid and cannnot be read
  FileLevelExemptions = The repository.yaml file contains file level exemptions
  UnusedExemptions = The repository.yaml file contains unused exemptions
}

allRules {

  knownBinaryFilesExtensions = [
    ".tar", ".gz", ".jar", ".7z", ".rar", ".bz2", ".zip", ".gzip", ".war", ".ear"
    ".xlsx", ".xls", ".docx", ".doc", ".pptx", ".pdf"
    ".jpg", ".png", ".jpeg", ".tif", ".tiff", ".gif", ".bmp", ".webp", ".svg", ".ico", ".psd"
    ".exe", ".dll", ".dmg", ".deb", ".rpm"
  ]

  privateRules = [
    {
      id = "aws_secret_access_key"
      scope = fileContent
      regex = """(SECRET|secret|Secret|ACCESS|access|Access|KEY|key|Key)("|')?(:.{0,50})?\s*(:|=>|=|->)\s*("|')?[A-Za-z0-9\/\+=]{40}(?![A-Za-z0-9\/+=])"""
      # https://regex101.com/r/GYXoFE/1
      # https://github.com/awslabs/git-secrets/blob/80230afa8c8bdeac766a0fece36f95ffaa0be778/git-secrets#L239
      # https://aws.amazon.com/blogs/security/a-safer-way-to-distribute-aws-credentials-to-ec2/
      description = "AWS secret key"
      ignoredFiles = ["^\\/.*phantomjs.*", "^\\/.*chromedriver.*", "^\\/.*BrowserStackLocal.*", "/repository.yaml"]
      ignoredExtensions = ${allRules.knownBinaryFilesExtensions}
      priority = "high"
    },
    {
      id = "cert_1"
      scope = fileContent
      regex = """-----(BEGIN|END).*?(PRIVATE|OpenVPN Static key).*?-----"""
      description = "certificates and private keys"
      ignoredFiles = ["^\\/.*phantomjs.*", "^\\/.*chromedriver.*", "^\\/.*BrowserStackLocal.*", """.*kitchen\.yml""", "/repository.yaml"]
      ignoredExtensions = ${allRules.knownBinaryFilesExtensions}
      priority = "high"
    },
    {
      id = "application_secret"
      scope = fileContent
      regex = """application\.secret\s*(=|:|->)\s*(?!(\s*ENC\[))"""
      description = "Unencrypted application.secret"
      ignoredFiles = ["/conf/application.conf", "^\\/.*phantomjs.*", "^\\/.*chromedriver.*", "^\\/.*BrowserStackLocal.*", "/repository.yaml"]
      ignoredExtensions = ${allRules.knownBinaryFilesExtensions}[".scala"]
      priority = "medium"
    },
    {
      id = "play_crypto_secret"
      scope = fileContent
      regex = """play\.crypto\.secret\s*(=|:|->)\s*(?!(\s*ENC\[))"""
      description = "Unencrypted play.crypto.secret"
      ignoredFiles = ["/conf/application.conf", "^\\/.*phantomjs.*", "^\\/.*chromedriver.*", "^\\/.*BrowserStackLocal.*", "/repository.yaml"]
      ignoredExtensions = ${allRules.knownBinaryFilesExtensions}[".scala"]
      priority = "medium"
    },
    {
      id = "play_http_secret_key"
      scope = fileContent
      regex = """play\.http\.secret\.key\s*(=|:|->)\s*(?!(\s*(ENC\[|"some_secret")))"""
      description = "Unencrypted play.http.secret.key"
      ignoredFiles = ["/conf/application.conf", "^\\/.*phantomjs.*", "^\\/.*chromedriver.*", "^\\/.*BrowserStackLocal.*", "/repository.yaml"]
      ignoredExtensions = ${allRules.knownBinaryFilesExtensions}[".scala"]
      priority = "medium"
    },
    {
      id = "cookie_deviceId_secret"
      scope = fileContent
      regex = """cookie\.deviceId\.secret\s*(=|:|->)\s*(?!(\s*ENC\[))"""
      description = "Unencrypted cookie.deviceId.secret"
      ignoredFiles = ["/conf/application.conf", "^\\/.*phantomjs.*", "^\\/.*chromedriver.*", "^\\/.*BrowserStackLocal.*", "/repository.yaml"]
      ignoredExtensions = ${allRules.knownBinaryFilesExtensions}[".scala"]
      priority = "medium"
    },
    {
      id = "sso_encryption_key"
      scope = fileContent
      regex = """sso\.encryption\.key\s*(=|:|->)\s*(?!(\s*ENC\[))"""
      description = "Unencrypted sso.encryption.key"
      ignoredFiles = ["/conf/application.conf", "^\\/.*phantomjs.*", "^\\/.*chromedriver.*", "^\\/.*BrowserStackLocal.*", "/repository.yaml"]
      ignoredExtensions = ${allRules.knownBinaryFilesExtensions}[".scala"]
      priority = "medium"
    },
    {
      id = "filename_private_key_1"
      scope = fileName
      regex = """.p12\z"""
      description = "p12 files often containing private keys"
      priority = "high"
    },
    {
      id = "filename_private_key_2"
      scope = fileName
      regex = """.pfx\z"""
      description = "pfx files often containing private keys"
      priority = "high"
    },
    {
      id = "filename_private_key_3"
      scope = fileName
      regex = """.pkcs12\z"""
      description = "pkcs12 files often containing private keys"
      priority = "high"
    },
    {
      id = "filename_private_key_5"
      scope = fileName
      regex = """.pem\z"""
      description = "pem files often containing private keys"
      priority = "high"
    },
    {
      id = "filename_private_key_7"
      scope = fileName
      regex = """_rsa\z"""
      description = "_rsa files often containing private keys"
      priority = "high"
    },
    {
      id = "filename_private_key_8"
      scope = fileName
      regex = """_dsa\z"""
      description = "_dsa files often containing private keys"
      priority = "high"
    },
    {
      id = "filename_private_key_9"
      scope = fileName
      regex = """_ed25519\z"""
      description = "_ed25519 files often containing private keys"
      priority = "high"
    },
    {
      id = "filename_private_key_10"
      scope = fileName
      regex = """_ecdsa\z"""
      description = "_ecdsa files often containing private keys"
      priority = "high"
    },
    {
      id = "filename_private_key_11"
      scope = fileName
      regex = """.jks\z"""
      description = "Java KeyStore file, often containing private keys"
      priority = "high"
    },
    {
      id = "shell_1"
      scope = fileName
      regex = """\A\.?(bash|zsh)rc\z"""
      description = ".bashrc or .zshrc file"
      priority = "medium"
    },
    {
      id = "shell_2"
      scope = fileName
      regex = """\A\.?(bash|zsh)_profile\z"""
      description = ".bash_profile or .zsh_profile files"
      priority = "medium"
    },
    {
      id = "shell_3"
      scope = fileName
      regex = """\A\.?(bash|zsh)_aliases\z"""
      description = ".bash_aliases or .zsh_aliases files"
      priority = "medium"
    },
    {
      id = "credential_1"
      scope = fileName
      regex = """\A\.credential(s)?\z"""
      description = ".credential(s) files often contain secrets for AWS, GitHub etc"
      priority = "high"
    },
    {
      id = "credential_2"
      scope = fileName
      regex = """\A\.githubenterprise\z"""
      description = "Github Enterprise credentials"
      priority = "high"
    },
    {
      id = "credential_3"
      scope = fileName
      regex = """\A.*keychain\z"""
      description = "Apple Keychain database file"
      priority = "high"
    },
    {
      id = "credential_4"
      scope = fileName
      regex = """\Akey(store|ring)\z"""
      description = "GNOME Keyring database file"
      priority = "high"
    },
    {
      id = "tfstate_1"
      scope = fileName
      regex = """\A.*.tfstate.*\z"""
      description = "Terrafrom state file https://www.terraform.io/docs/language/state/sensitive-data.html"
      priority = "medium"
    },
    {
      id = "tfstate_2"
      scope = fileName
      regex = """\A*.tfstate\z"""
      description = "Terrafrom state file https://www.terraform.io/docs/language/state/sensitive-data.html"
      priority = "medium"
    },
    {
      id = "message_delivery_group_key"
      scope = fileContent
      regex = """\b([0-9a-z]{20,40}(pre)?prod)\b"""
      description = "Message Delievery Group key"
      ignoredFiles = ["/repository.yaml"]
      priority = "low"
    }
  ]
  publicRules = ${allRules.privateRules} [
    {
      id = "ip_addresses"
      scope = fileContent
      regex = """\b10\.(?:19|33|39)\.(?:6|1)(?:82|76|[3-4]|[8-9])[6-7]*\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\b"""
      description = "IP address"
      ignoredFiles = [
        "/node_modules/bootstrap-sass/CHANGELOG.md",
        "/.ensime",
        "/project/MicroServiceBuild.scala",
        "/project/MicroService.scala",
        "/build.sbt",
        "/BrowserStackLocal",
        "/repository.yaml"
      ]
      ignoredExtensions = ${allRules.knownBinaryFilesExtensions}
      priority = "low"
    },
    {
    id = "nino"
    scope = fileContent
    regex = """\b(?!BG)(?!GB)(?!NK)(?!KN)(?!TN)(?!NT)(?!ZZ)[A-Z&&[^DFIQUV]][A-Z&&[^DFIOQUV]][0-9]{6}[A-D]\b"""
    description = "PII - national insurance number"
    ignoredExtensions = ${allRules.knownBinaryFilesExtensions}
    ignoredFiles = [ "/repository.yaml" ]
    ignoredContent = [ "A[AB]123456", "AA0000", "AA(1{6}|2{6}|3{6}|4{6}|5{6}|6{6}|7{6}|8{6}|9{6})A" ]
    priority = "medium"
    draft = true
    }
  ]
}

github {
  url                = "https://api.github.com"
  zipDownloadTimeout = 1 minutes
}

githubSecrets {
  personalAccessToken = PLACEHOLDER
}

maxLineLength = 2147483647 // Int.MaxValue

clearingCollectionEnabled = false

queue {
  retryAfter                  = 10 minutes
  metricsGauges.interval      = 10 minutes
  timeoutBackOff              = 10 minutes
  timeoutBackOffMax           = 7 days
  timeoutFailureLogAfterCount = 2
}

scheduling.scanner {
  enabled      = true
  initialDelay = 10 seconds
  interval     = 10 seconds
}

shared.repositories = []

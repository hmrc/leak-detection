# Copyright 2018 HM Revenue & Customs
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

include "backend.conf"

# This is the main configuration file for the application.
# ~~~~~

appName=leak-detection

# An ApplicationLoader that uses Guice to bootstrap the application.
play.application.loader = "uk.gov.hmrc.play.bootstrap.ApplicationLoader"

# Primary entry point for all HTTP requests on Play applications
play.http.requestHandler = "uk.gov.hmrc.play.bootstrap.http.RequestHandler"

# Provides an implementation of AuditConnector. Use `uk.gov.hmrc.play.bootstrap.AuditModule` or create your own.
# An audit connector must be provided.
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.AuditModule"

# Provides an implementation of MetricsFilter. Use `uk.gov.hmrc.play.graphite.GraphiteMetricsModule` or create your own.
# A metric filter must be provided
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.graphite.GraphiteMetricsModule"

# Provides an implementation and configures all filters required by a Platform frontend microservice.
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.MicroserviceModule"
play.http.filters = "uk.gov.hmrc.play.bootstrap.filters.MicroserviceFilters"

# Json error handler
play.http.errorHandler = "uk.gov.hmrc.play.bootstrap.http.JsonErrorHandler"

# Http client
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.HttpClientModule"

# Play Modules
# ~~~~
# Additional play modules can be added here

play.modules.enabled += "play.modules.reactivemongo.ReactiveMongoHmrcModule"

# Session Timeout
# ~~~~
# The default session timeout for the app is 15 minutes (900seconds).
# Updating this is the responsibility of the app - it must issue a new cookie with each request or the session will
# timeout 15 minutes after login (regardless of user activity).
# session.maxAge=900

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
play.crypto.secret="Htt5cyxh8eIu2TKqKk3h8qxcR2bXAldiKyTYTxmFLNNdmWcx4HGxf8pQJ2Hb1B7b"

# Session configuration
# ~~~~~
application.session.httpOnly=false
application.session.secure=false

# The application languages
# ~~~~~
application.langs="en"

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# !!!WARNING!!! DO NOT CHANGE THIS ROUTER
play.http.router=prod.Routes


# Controller
# ~~~~~
# By default all controllers will have authorisation, logging and
# auditing (transaction monitoring) enabled.
# The below controllers are the default exceptions to this rule.

controllers {
    # 300 is the default, you may need to change this according to your needs
    confidenceLevel = 300

    com.kenshoo.play.metrics.MetricsController = {
      needsAuth = false
      needsLogging = false
      needsAuditing = false
    }

}


# Metrics plugin settings - graphite reporting is configured on a per env basis
metrics {
    name = ${appName}
    rateUnit = SECONDS
    durationUnit = SECONDS
    showSamples = true
    jvm = true
    enabled = true
}


# Microservice specific config

auditing {
    enabled=false
    traceRequests=true
    consumer {
        baseUri {
            host = localhost
            port = 8100
        }
    }
}


mongodb {
    uri = "mongodb://localhost:27017/leak-detection"
}


microservice {
    metrics {
        graphite {
            host = graphite
            port = 2003
            prefix = play.${appName}.
            enabled = false
        }
    }

    services {

        auth {
            host=localhost
            port=8500
        }

        slack-notifications {
            host=localhost
            port=8866
        }

    }
}

alerts {
    slack {
        leakDetectionUri = "http://localhost:8855"
        enabled = false
        sendToTeamChannels = false
        sendToAlertChannel = true
        adminChannel = "#admin-channel"
        defaultAlertChannel = "#a-channel"
        username = "leak-detection"
        iconEmoji = ":closed_lock_with_key:"
        messageText = "Action Required! Something sensitive seems to have been pushed to `{repo}` on github, `{branch}` branch. Please have a look at the report below as soon as possible"
    }
}
allRules {
    privateRules = [

        # Add here all private rules. For example:
        #  {
        #      id = "play.crypto.secret"
        #      scope = fileContent
        #      regex = """((?:play\.crypto\.secret(?!\s*(:|=)*\s*ENC\[)).*)"""
        #      description = "Unencrypted play.crypto.secret"
        #      ignoredFiles = ["/application.conf"]
        #      ignoredExtensions = [".scala"]
        #  },
        #  {
        #      id = "private_key"
        #      scope = fileName
        #      regex = """.p12\z"""
        #      description = "File often containing private keys"
        #  },
    ]

    publicRules = ${allRules.privateRules} [
        # Includes all private rules, add here the public only rules
    ]
}

githubSecrets {
    webhookSecretKey = PLACEHOLDER
    personalAccessToken = PLACEHOLDER
}

leakResolutionUrl = PLACEHOLDER

maxLineLength = 2147483647 // Int.MaxValue

